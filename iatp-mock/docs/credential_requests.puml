@startuml
autonumber
skinparam sequenceMessageAlign center

box "Data Consumer"
participant "Connector" as con_cons
end box

box "De-/Central Services"
participant "BDRS" as bdrs
participant "Secure Token Service" as sts
participant "Credential Service" as cs
end box

box "Data Provider"
participant "Connector" as con_prov
end box

note over con_cons, cs
Issue credentials using "CredentialMessage" via POST /credentials
in a CredentialContainer
{
  "@context": [
    "https://w3id.org/tractusx-trust/v0.8"
  ],
  "@type": "CredentialMessage",
  "credentials": [
    {
      "@type": "CredentialContainer",
      "payload": ""
    }
  ]
}
end note
-> cs: issue credentials for consumer and provider
-> con_cons: query catalog of supplier
note right
Catalog of provider has offer with restriction:
- access policy BPNL
- access policy Membership

Note: I think it's only provider
end note

con_cons -> bdrs: resolve DID for provider BPNL
activate bdrs
return DID

con_cons -> sts: grant access to self-signed VP
activate sts
return self-signed token with access token (for cs)
note over con_cons, sts
self-issued token contains:
- iss, sub = consumer DID (bearer owner)
- aud = provider DID (relying party)
- token_id = id to map the sign_token request later
- token = bearer token providing access to
  the VP via the credential service
end note

con_cons -> con_prov: hand over SI token and request
activate con_prov

con_prov -> sts: SIGN TOKEN REQUEST
activate sts
return jwt (no real content)
note over con_prov, sts
self-issued token contains:
- iss = trusted issuer
- sub = consumer DID (bearer owner)
- aud = provider DID (relying party)
end note

note left: likely here the DID is resolved \nand the did's credential service is used

con_prov -> cs: Query VP with access token
activate cs
note over con_prov, cs
Query a VP for a scope containing VCs via POST /presentation/query
{
  "@context": [
    "https://w3id.org/tractusx-trust/v0.8",
    "https://identity.foundation/presentation-exchange/submission/v1"
  ],
  "@type": "PresentationQueryMessage",
  "scope": []
}
end note
return VP with requested scopes
note over con_prov, cs
Returns a "PresentationResponseMessage" containing a VP
including the requested VCs
{
  "@context": [
    "https://w3id.org/tractusx-trust/v0.8"
  ],
  "@type": "PresentationResponseMessage",
  "presentation": ["dsJdh...UMetV"]
}
the presentation may contain multiple VC
end note

con_prov -> con_prov: evaluate presentation (includes resolving \nissuer did resolving to check signature)

con_prov --> con_cons: return catalog
deactivate con_prov

@enduml
