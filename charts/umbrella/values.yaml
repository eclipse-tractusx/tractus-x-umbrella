# #############################################################################
# Copyright (c) 2023,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
## TODO: update edc to R23.12 and adjust values
# edcconsumer:
#   nameOverride: edcconsumer
#   install:
#     daps: true
#     postgresql: true
#     vault: true
#   backendService:
#     # TODO: what is the correct value here?
#     httpProxyTokenReceiverUrl: "http://localhost"
#   controlplane:
#     endpoints:
#       management:
#         authKey: consumer-authkey
#     image:
#       repository: *edcCpImage
#       tag: *edcImageTag
#   daps:
#     clientId: *edcConsumerDapsClientId
#     daps:
#       secret:
#         clientId: *dapsClientId
#         clientSecret: *dapsClientSecret
#     image:
#       repository: ghcr.io/fraunhofer-aisec/omejdn-server
#     # podSecurityContext:
#     #   fsGroup: 1000
#     #   runAsNonRoot: true
#     #   runAsUser: 1000
#     #   runAsGroup: 1000
#     # persistence:
#     #   accessMode: "ReadWriteOnce"
#   dataplane:
#     image:
#       repository: *edcDpImage
#       tag: *edcImageTag
#   networkPolicy:
#     enabled: *netPolEnabled
#   participant:
#     id: consumer
#   postgresql:
#     nameOverride: consumer-postgresql
#     networkPolicy:
#       enabled: *netPolEnabled
#       ingressRules:
#         primaryAccessOnlyFrom:
#           enabled: true
#           podSelector:
#             app.kubernetes.io/name: edcconsumer-controlplane
#             app.kubernetes.io/instance: '{{ .Release.Name }}-controlplane'
#     jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-consumer-postgresql:5432/edc"
#     auth:
#       username: psql-consumer-user
#       password: psql-consumer-password
#   vault:
#     hashicorp:
#       token: *edcVaultToken
#     server:
#       dev:
#         devRootToken: *edcVaultToken
#       networkPolicy:
#         enabled: *netPolEnabled
#     secretNames:
#       dapsPrivateKey: *edcConsumerVaultDapsPrivateKey
#       dapsPublicKey: *edcConsumerVaultDapsPublicKey
#       transferProxyTokenEncryptionAesKey: *edcConsumerVaultTransferEncryptionAesKey
#       transferProxyTokenSignerPrivateKey: *edcConsumerVaultTransferPrivateKey
#       transferProxyTokenSignerPublicKey: *edcConsumerVaultTransferPublicKey

# edcprovider:
#   nameOverride: edcprovider
#   install:
#     daps: false
#     postgresql: true
#     vault: false
#   backendService:
#     # TODO: what is the correct value here?
#     httpProxyTokenReceiverUrl: "http://localhost"
#   controlplane:
#     endpoints:
#       management:
#         authKey: provider-authkey
#     image:
#       repository: *edcCpImage
#       tag: *edcImageTag
#   daps:
#     clientId: *edcProviderDapsClientId
#   dataplane:
#     image:
#       repository: *edcDpImage
#       tag: *edcImageTag
#   participant:
#     id: provider
#     clientId: *edcProviderDapsClientId
#   networkPolicy:
#     enabled: *netPolEnabled
#   postgresql:
#     nameOverride: provider-postgresql
#     jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-provider-postgresql:5432/edc"
#     auth:
#       username: psql-provider-user
#       password: psql-provider-password
#     networkPolicy:
#       enabled: *netPolEnabled
#       ingressRules:
#         primaryAccessOnlyFrom:
#           enabled: true
#           podSelector:
#             app.kubernetes.io/name: edcprovider-controlplane
#             app.kubernetes.io/instance: '{{ .Release.Name }}-controlplane'
#   vault:
#     hashicorp:
#       token: *edcVaultToken
#     secretNames:
#       dapsPrivateKey: *edcProviderVaultDapsPrivateKey
#       dapsPublicKey: *edcProviderVaultDapsPublicKey
#       transferProxyTokenEncryptionAesKey: *edcProviderVaultTransferEncryptionAesKey
#       transferProxyTokenSignerPrivateKey: *edcProviderVaultTransferPrivateKey
#       transferProxyTokenSignerPublicKey: *edcProviderVaultTransferPublicKey

portal:
  enabled: true
  replicaCount: 1

centralidp:
  enabled: true
  keycloak:
    nameOverride: "centralidp"
    replicaCount: 1
    postgresql:
      nameOverride: "centralidp-postgresql"
      architecture: standalone

sharedidp:
  enabled: true
  keycloak:
    nameOverride: "sharedidp"
    replicaCount: 1
    postgresql:
      nameOverride: "sharedidp-postgresql"
      architecture: standalone

bpndiscovery:
  enabled: true
  enablePostgres: true
  bpndiscovery:
    authentication: false
    bpndiscoverEndpoint:
      allowedTypes: oen,wmi,passtype,manufacturerPartId
      description: Service to discover BPN for different kind of type numbers
      endpointAddress: /bpndiscovery
      documentation: /bpndiscovery/swagger-ui/index.html
      timeToLive: "31536000"
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "bpndiscovery-postgresql"

discoveryfinder:
  enabled: true
  enablePostgres: true
  discoveryfinder:
    authentication: false
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "discoveryfinder-postgresql"
