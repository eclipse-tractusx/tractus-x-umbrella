# #############################################################################
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
global:
  edc:
    # temporary using fixed image + tag
    # Because there is no tractusx-connector release including PRs 473,474,475
    # for 0.4.x we use the legacy Helm chart from release 0.5.0-rc1
    cp:
      image: &edcCpImage tractusx/edc-controlplane-postgresql-hashicorp-vault
    dp:
      image: &edcDpImage tractusx/edc-dataplane-hashicorp-vault
    tag: &edcImageTag 0.4.1


  daps:
    # url: &dapsUrl "http://{{ .Release.Name }}-daps:4567"
    auth:
      # management login credentials for daps-server (username)
      clientId: &dapsClientId admin
      # management login credentials for daps-server (password)
      clientSecret: &dapsClientSecret ThisiSaSuPERSecretPassword1!11

    consumer:
      daps:
        # identity of the EDC (consumer) at daps-server
        clientId: &edcConsumerDapsClientId consumer-daps-clientid

      vault:
        daps:
          # vault path of registered certificate for EDC to authenticate to EDC
          privateKey: &edcConsumerVaultDapsPrivateKey edcconsumer-daps-private-key
          # vault path of registered certificate for EDC to authenticate to EDC
          publicKey: &edcConsumerVaultDapsPublicKey edcconsumer-daps-public-key

        transfer:
          # vault path of key for dataplane transfer
          encryptionAesKey: &edcConsumerVaultTransferEncryptionAesKey edcconsumer-transfer-proxy-token-encryption-aes-key
          # vault path of certificate for dataplane transfer
          privateKey: &edcConsumerVaultTransferPrivateKey edcconsumer-transfer-proxy-token-signer-private-key
          # vault path of certificate for dataplane transfer
          publicKey: &edcConsumerVaultTransferPublicKey edcconsumer-transfer-proxy-token-signer-public-key

    provider:
      daps:
        # identity of the EDC (provider) at daps-server
        clientId: &edcProviderDapsClientId provider-daps-clientid

      vault:
        daps:
          privateKey: &edcProviderVaultDapsPrivateKey edcprovider-daps-private-key
          publicKey: &edcProviderVaultDapsPublicKey edcprovider-daps-public-key

        transfer:
          encryptionAesKey: &edcProviderVaultTransferEncryptionAesKey edcprovider-transfer-proxy-token-encryption-aes-key
          privateKey: &edcProviderVaultTransferPrivateKey edcprovider-transfer-proxy-token-signer-private-key
          publicKey: &edcProviderVaultTransferPublicKey edcprovider-transfer-proxy-token-signer-public-key

    vault:
      # url: &vaultUrl "http://{{ .Release.Name }}-vault:8200"
      token: &edcVaultToken vaultRootToken

certsconsumer:
  daps:
    auth:
      clientId: *dapsClientId
      clientSecret: *dapsClientSecret
    edc:
      clientId: *edcConsumerDapsClientId

  vault:
    daps:
      privateKey: *edcConsumerVaultDapsPrivateKey
      publicKey: *edcConsumerVaultDapsPublicKey
    token: *edcVaultToken
    transfer:
      encryptionAesKey: *edcConsumerVaultTransferEncryptionAesKey
      privateKey: *edcConsumerVaultTransferPrivateKey
      publicKey: *edcConsumerVaultTransferPublicKey

certsprovider:
  daps:
    auth:
      clientId: *dapsClientId
      clientSecret: *dapsClientSecret
    edc:
      clientId: *edcProviderDapsClientId

  vault:
    daps:
      privateKey: *edcProviderVaultDapsPrivateKey
      publicKey: *edcProviderVaultDapsPublicKey
    token: *edcVaultToken
    transfer:
      encryptionAesKey: *edcProviderVaultTransferEncryptionAesKey
      privateKey: *edcProviderVaultTransferPrivateKey
      publicKey: *edcProviderVaultTransferPublicKey

edcconsumer:
  nameOverride: edcconsumer

  install:
    daps: true
    postgresql: true
    vault: true

  backendService:
    # TODO: what is the correct value here?
    httpProxyTokenReceiverUrl: "http://localhost"

  controlplane:
    endpoints:
      management:
        authKey: consumer-authkey

    image:
      repository: *edcCpImage
      tag: *edcImageTag

  daps:
    clientId: *edcConsumerDapsClientId

    daps:
      secret:
        clientId: *dapsClientId
        clientSecret: *dapsClientSecret

    image:
      repository: ghcr.io/fraunhofer-aisec/omejdn-server

    # podSecurityContext:
    #   fsGroup: 1000
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    # persistence:
    #   accessMode: "ReadWriteOnce"

  dataplane:
    image:
      repository: *edcDpImage
      tag: *edcImageTag

  participant:
    id: consumer

  postgresql:
    nameOverride: consumer-postgresql

    jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-consumer-postgresql:5432/edc"

    auth:
      username: psql-consumer-user
      password: psql-consumer-password

    primary:
      podSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsGroup: 65534 # nogroup
        runAsUser: 1001
        fsGroup: 65534 # nogroup

  vault:
    hashicorp:
      token: *edcVaultToken
    server:
      dev:
        devRootToken: *edcVaultToken

    secretNames:
      dapsPrivateKey: *edcConsumerVaultDapsPrivateKey
      dapsPublicKey: *edcConsumerVaultDapsPublicKey

      transferProxyTokenEncryptionAesKey: *edcConsumerVaultTransferEncryptionAesKey
      transferProxyTokenSignerPrivateKey: *edcConsumerVaultTransferPrivateKey
      transferProxyTokenSignerPublicKey: *edcConsumerVaultTransferPublicKey


edcprovider:
  nameOverride: edcprovider

  install:
    daps: false
    postgresql: true
    vault: false

  backendService:
    # TODO: what is the correct value here?
    httpProxyTokenReceiverUrl: "http://localhost"

  controlplane:
    endpoints:
      management:
        authKey: provider-authkey

    image:
      repository: *edcCpImage
      tag: *edcImageTag

  daps:
    clientId: *edcProviderDapsClientId

  dataplane:
    image:
      repository: *edcDpImage
      tag: *edcImageTag

  participant:
    id: provider

    clientId: *edcProviderDapsClientId

  postgresql:
    nameOverride: provider-postgresql

    jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-provider-postgresql:5432/edc"

    auth:
      username: psql-provider-user
      password: psql-provider-password

    primary:
      podSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsGroup: 65534 # nogroup
        runAsUser: 1001
        fsGroup: 65534 # nogroup

  vault:
    hashicorp:
      token: *edcVaultToken

    secretNames:
      dapsPrivateKey: *edcProviderVaultDapsPrivateKey
      dapsPublicKey: *edcProviderVaultDapsPublicKey

      transferProxyTokenEncryptionAesKey: *edcProviderVaultTransferEncryptionAesKey
      transferProxyTokenSignerPrivateKey: *edcProviderVaultTransferPrivateKey
      transferProxyTokenSignerPublicKey: *edcProviderVaultTransferPublicKey
