# #############################################################################
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
{{ $fullName := include "dataprovider.fullname" . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-vault-configmap
data:
  vault-setup.sh: |-
    #!/bin/sh
    # Install jq for JSON parsing
    apk add --no-cache jq
    
    # Function to check if secret exists and matches expected value
    check_and_update_secret() {
      local secret_key="$1"
      local vault_json_file="$2"
      
      echo "=== Checking secret: $secret_key ==="
      
      # Extract expected value from the JSON file
      expected_value=$(cat "$vault_json_file" | jq -r '.data.content // empty' 2>/dev/null)
      
      # Try to get existing secret
      existing_secret_response=$(wget --quiet --header "X-Vault-Token: {{ index .Values "tractusx-connector" "vault" "hashicorp" "token" }}" \
        -O- "{{ tpl (index .Values "tractusx-connector" "vault" "hashicorp" "url") . }}/v1/secret/data/$secret_key" 2>/dev/null || echo "")
      
      if [ -n "$existing_secret_response" ] && echo "$existing_secret_response" | jq -e . >/dev/null 2>&1; then
        echo "Found existing secret, parsing JSON response..."
        
        # Extract the content value from the JSON response using jq
        existing_value=$(echo "$existing_secret_response" | jq -r '.data.data.content // empty' 2>/dev/null)
        
        if [ -n "$existing_value" ] && [ "$existing_value" = "$expected_value" ]; then
          echo "✅ Secret $secret_key already exists with correct value - skipping update"
          echo "=== End check for $secret_key ==="
          return 0
        else
          echo "🔄 Secret $secret_key exists but value differs or is empty - updating"
          echo "  Expected: [$expected_value]"
          echo "  Existing: [$existing_value]"
        fi
      else
        echo "🆕 Secret $secret_key not found or invalid response - creating"
        if [ -n "$existing_secret_response" ]; then
          echo "Response was: $existing_secret_response"
        fi
      fi
      
      # Update the secret using file-based approach
      echo "Updating secret $secret_key using file: $vault_json_file"
      update_result=$(wget --header 'Content-Type: application/json' --header 'X-Vault-Token: {{ index .Values "tractusx-connector" "vault" "hashicorp" "token" }}' \
        --post-file="$vault_json_file" "{{ tpl (index .Values "tractusx-connector" "vault" "hashicorp" "url") . }}/v1/secret/data/$secret_key" -O- 2>&1)
      
      if [ $? -eq 0 ]; then
        echo "✅ Successfully updated secret: $secret_key"
        echo "Update response: $update_result"
      else
        echo "❌ Failed to update secret: $secret_key"
        echo "Error response: $update_result"
      fi
      echo "=== End check for $secret_key ==="
    }

    # Wait for vault to be ready
    echo "Waiting for vault to be ready..."
    until wget --spider --quiet "{{ tpl (index .Values "tractusx-connector" "vault" "hashicorp" "url") . }}/v1/sys/health" 2>/dev/null; do
      echo "Vault not ready yet, waiting..."
      sleep 10
    done
    echo "Vault is ready, setting up secrets..."
    
    # Setup secrets from values (now as files in configmap)
    {{- if .Values.secrets }}
    {{- range $key, $value := .Values.secrets }}
    check_and_update_secret "{{ $key }}" "/opt/config/secret-{{ $key }}.json"
    {{- end }}
    {{- end }}

    # Setup certificate and key secrets from configmap
    echo "=== Setting up certificate secrets ==="
    check_and_update_secret "tokenSignerPublicKey" "/opt/config/cert.json"
    check_and_update_secret "tokenSignerPrivateKey" "/opt/config/key.json"
    check_and_update_secret "tokenEncryptionAesKey" "/opt/config/aes-secret.json"
    
    echo "=== Vault setup completed successfully! ==="